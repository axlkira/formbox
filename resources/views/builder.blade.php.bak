<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>FormBox Builder</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        body { background: #f8f9fa; }
        #sidebar-menu {
            background: linear-gradient(120deg, #2563eb 70%, #60a5fa 100%);
            color: #fff;
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 270px;
            z-index: 1050;
            box-shadow: 2px 0 16px 0 #2563eb22;
            border-top-right-radius: 22px;
            border-bottom-right-radius: 22px;
            overflow: hidden;
        }
        #sidebar-menu .fw-bold {
            font-size: 1.5rem;
            letter-spacing: 1px;
            color: #fff;
            text-shadow: 0 2px 8px #2563eb33;
            margin-bottom: 8px;
        }
        .builder-toolbar {
            padding: 28px 18px 0 18px !important;
        }
        #add-section {
            background: linear-gradient(90deg, #fff 60%, #dbeafe 100%);
            color: #2563eb;
            border: none;
            font-weight: 700;
            border-radius: 12px;
            box-shadow: 0 2px 8px #2563eb22;
            transition: box-shadow .2s, background .2s;
            margin-bottom: 16px;
        }
        #add-section:hover {
            background: #fff;
            box-shadow: 0 4px 16px #2563eb33;
        }
        #open-widget-modal {
            background: #2563eb;
            color: #fff;
            border: none;
            font-weight: 700;
            border-radius: 12px;
            box-shadow: 0 2px 8px #60a5fa44;
            margin-bottom: 20px;
        }
        #open-widget-modal:hover {
            background: #1d4ed8;
            color: #fff;
        }
        .sidebar-instructions {
            background: #1e40af33;
            border-radius: 10px;
            padding: 16px 12px;
            margin-top: 22px;
            color: #e0e7ef;
            font-size: 1.05rem;
        }
        .sidebar-instructions li { margin-bottom: 4px; }
        #main-builder-canvas { margin-left: 270px; min-height: 100vh; padding: 40px 32px 32px 32px; background: #f5f7fa; }
        .elementor-section {
            border: 2px dashed #2563eb;
            background: #fff;
            margin-bottom: 32px;
            padding: 24px 12px 12px 12px;
            position: relative;
            border-radius: 18px;
            box-shadow: 0 4px 24px #2563eb0a;
        }
        .elementor-section.selected { box-shadow: 0 0 0 3px #60a5fa; }
        .elementor-section .btn-remove-section {
            position: absolute;
            top: 8px;
            right: 8px;
            z-index: 10;
        }
        .elementor-column {
            min-height: 70px;
            border: 1.5px dashed #60a5fa;
            background: #f8fbff;
            margin-bottom: 8px;
            position: relative;
            display: inline-block;
            vertical-align: top;
            width: 100%;
            border-radius: 12px;
            margin-right: 8px;
            padding: 12px 6px 18px 6px;
        }
        .elementor-column .btn-remove-column {
            position: absolute;
            top: 8px;
            right: 8px;
            z-index: 10;
        }
        .elementor-widget {
            background: #f1f5f9;
            border: 1.5px solid #a5b4fc;
            border-radius: 10px;
            margin-bottom: 14px;
            padding: 16px 16px 16px 44px;
            cursor: grab;
            transition: border .2s, box-shadow .2s;
            position: relative;
            box-shadow: 0 2px 8px #2563eb15;
            min-height: 56px;
            display: flex;
            align-items: center;
            gap: 16px;
        }
        .elementor-widget.selected {
            border: 2.5px solid #2563eb;
            background: #e0e7ff;
            box-shadow: 0 0 0 2px #2563eb33;
        }
        .elementor-widget .btn-remove-widget {
            position: absolute;
            left: 6px;
            top: 6px;
            z-index: 20;
            padding: 0 6px;
            background: #fee2e2;
            border-radius: 6px;
            color: #be123c;
            border: none;
        }
        .elementor-widget .btn-remove-widget:hover { background: #fecaca; color: #991b1b; }
        .elementor-widget .widget-preview {
            flex: 1;
            min-width: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .elementor-widget input,
        .elementor-widget textarea,
        .elementor-widget select {
            background: #fff;
            border: 1px solid #c7d2fe;
            border-radius: 7px;
            padding: 7px 10px;
            width: 100%;
            font-size: 1rem;
            color: #222;
            box-shadow: none;
            outline: none;
        }
        .elementor-widget input:focus,
        .elementor-widget textarea:focus,
        .elementor-widget select:focus {
            border-color: #2563eb;
            box-shadow: 0 0 0 2px #60a5fa33;
        }
        .elementor-widget label {
            font-weight: 500;
            color: #2563eb;
            margin-bottom: 0;
            margin-right: 8px;
            min-width: 90px;
        }
        .sortable-placeholder {
            border: 2px dashed #2563eb !important;
            background: #dbeafe !important;
            min-height: 40px;
            border-radius: 8px;
            margin-bottom: 14px;
        }
        .highlight-drop {
            background-color: #e0f2fe !important;
            border: 2px dashed #0ea5e9 !important;
            transition: all 0.2s ease;
        }
        .sortable-widgets {
            min-height: 30px;
            padding: 5px;
            transition: all 0.2s ease;
        }
        @media (max-width: 991px) {
            #sidebar-menu { width:100vw; border-radius:0; }
            #main-builder-canvas { margin-left:0; padding:16px; }
            .properties-panel { width:100vw; left:0; right:0; top:auto; bottom:0; min-height:auto; border-left:none; border-top:1px solid #e5e5e5; }
        }
    </style>
</head>
<body>
    <div id="sidebar-menu" style="background: linear-gradient(120deg, #2563eb 70%, #60a5fa 100%);">
        <div class="d-flex flex-column h-100">
            <div class="p-3 border-bottom"><span class="fw-bold">FormBox</span></div>
            <div class="builder-toolbar" style="padding:28px 18px 0 18px;">
                <button id="add-section" class="btn btn-light text-primary w-100 mb-3 fw-bold" style="background: linear-gradient(90deg, #fff 60%, #dbeafe 100%); border: none; font-weight: 700; border-radius: 12px; box-shadow: 0 2px 8px #2563eb22; transition: box-shadow .2s, background .2s; margin-bottom: 16px;"><i class="bi bi-plus-circle"></i> Agregar sección</button>
                <button id="open-widget-modal" class="btn btn-outline-light w-100 mb-2"><i class="bi bi-plus-square"></i> Agregar widget</button>
                <div class="text-white-50 small mt-3">
                    <ul style="padding-left:18px;">
                        <li>1. Agrega una sección (fila)</li>
                        <li>2. Selecciona una columna</li>
                        <li>3. Haz clic en Agregar widget</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de widgets -->
    <div class="modal fade" id="widgetModal" tabindex="-1" aria-labelledby="widgetModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="widgetModalLabel">Selecciona un widget</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="row" id="widget-modal-list">
              <!-- Aquí se llenan los widgets -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="main-builder-canvas">
        <div id="sections-list"></div>
        <div id="empty-builder" class="text-center text-secondary" style="opacity:.7;">
            <i class="bi bi-hand-index-thumb fs-1"></i><br>
            Agrega una sección para comenzar a construir tu formulario
        </div>
    </div>
    <!-- Panel de propiedades mejorado -->
    <div class="properties-panel" id="properties-panel" style="position:fixed; top:40px; right:0; width:340px; height:calc(100vh - 60px); background:#fff; box-shadow:-2px 0 16px 0 #2563eb22; border-top-left-radius:22px; border-bottom-left-radius:22px; z-index:1100; display:none; overflow-y:auto; padding:24px 20px 16px 20px;">
        <div class="fw-bold mb-2" style="font-size:1.2rem; color:#2563eb"><i class="bi bi-sliders me-2"></i>Propiedades del elemento</div>
        <div id="properties-content">
            <div class="alert alert-info">Selecciona un campo para editar sus propiedades.</div>
        </div>
        <button type="button" class="btn btn-outline-secondary btn-sm mt-3 w-100" id="close-properties-panel"><i class="bi bi-x-lg"></i> Cerrar</button>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.all.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.min.css">
    <script>
    window.sections = window.sections || [];
    window.widgetTypes = window.widgetTypes || {
        text: 'Campo de texto', textarea: 'Área de texto', select: 'Selecciona una opción', switch: 'Interruptor', checkbox: 'Casilla', button: 'Botón', date: 'Fecha', file: 'Archivo', email: 'Email', number: 'Número', password: 'Password', color: 'Color', range: 'Rango', radio: 'Radio', static: 'Texto/HTML', card: 'Card'
    };
    window.widgetIcons = {
        text: 'bi-fonts', textarea: 'bi-card-text', select: 'bi-list', switch: 'bi-toggle-on', checkbox: 'bi-check2-square', button: 'bi-box-arrow-in-right', date: 'bi-calendar', file: 'bi-paperclip', email: 'bi-envelope', number: 'bi-123', password: 'bi-key', color: 'bi-palette', range: 'bi-sliders', radio: 'bi-record-circle', static: 'bi-type', card: 'bi-card-image'
    };

    let lastDraggedWidget = null;
    // Variable global para la referencia directa al widget seleccionado
    let selectedWidgetRef = null;

    $(document).ready(function() {
        console.log('SCRIPT: Document ready, inicializando FormBuilder...');
        renderSections();
        
        $('#sections-list').on('mousedown', '.elementor-widget', function(e) {
            lastDraggedWidget = {
                sidx: $(this).data('sidx'),
                cidx: $(this).data('cidx'),
                widx: $(this).data('widx'),
                type: window.sections[$(this).data('sidx')]?.columns[$(this).data('cidx')]?.widgets[$(this).data('widx')]?.type || 'text'
            };
            console.log('Widget arrastrado:', lastDraggedWidget);
        });
        
        // === SOLUCIÓN RADICAL Y DEFINITIVA ===
        // 1. Inicializa y limpia el modelo de datos SIEMPRE
        function ensureValidModel() {
            if (!Array.isArray(window.sections)) window.sections = [];
            window.sections = window.sections.filter(s => s && Array.isArray(s.columns));
            window.sections.forEach(section => {
                if (!Array.isArray(section.columns)) section.columns = [];
                section.columns = section.columns.filter(col => col && Array.isArray(col.widgets));
                section.columns.forEach(col => {
                    if (!Array.isArray(col.widgets)) col.widgets = [];
                });
            });
        }

        // 2. Refuerza la creación de secciones y columnas
        function createSection(numCols = 1) {
            const columns = [];
            for (let i = 0; i < numCols; i++) {
                columns.push({ widgets: [] });
            }
            window.sections.push({ columns });
            ensureValidModel();
            renderSections();
        }

        function createWidget(type, sidx, cidx) {
            const widget = {
                type,
                name: '',
                id: '',
                label: '',
                hidden: false,
                disabled: false,
                options: (type === 'select' || type === 'radio') ? ['Opción 1', 'Opción 2'] : [],
            };
            window.sections[sidx].columns[cidx].widgets.push(widget);
            ensureValidModel();
            renderSections();
            setTimeout(() => {
                $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${window.sections[sidx].columns[cidx].widgets.length-1}']`).trigger('click');
            }, 50);
        }

        // 3. Refuerza el renderizado
        function renderSections() {
            ensureValidModel();
            console.log('RENDER: Iniciando renderSections. Modelo actual:', JSON.parse(JSON.stringify(window.sections)));
            const $list = $('#sections-list');
            $list.empty();
            console.log('RENDER: Contenedor #sections-list vaciado.');
            if (window.sections.length === 0) {
                $('#empty-builder').show();
                console.log('RENDER: Mostrando mensaje de builder vacío.');
            } else {
                $('#empty-builder').hide();
                window.sections.forEach((section, sidx) => {
                    console.log(`RENDER: Procesando sección ${sidx} con ${section.columns.length} columnas.`);
                    let sectionHtml = `<div class='elementor-section' data-sidx='${sidx}'>`;
                    sectionHtml += `<button class='btn btn-danger btn-sm btn-remove-section' title='Eliminar sección' data-sidx='${sidx}'><i class='bi bi-x'></i></button>`;
                    sectionHtml += `<div class='row'>`;
                    // IMPORTANT: Check the columns array just before looping
                    if (!Array.isArray(section.columns)) {
                        console.error(`RENDER ERROR: section[${sidx}].columns NO es un array!`, section.columns);
                        section.columns = []; // Attempt to recover
                    }
                    console.log(`RENDER: Iterando sobre ${section.columns.length} columnas para sección ${sidx}`);
                    const numCols = section.columns.length;
                    section.columns.forEach((col, cidx) => {
                        console.log(`RENDER:   - Construyendo HTML para columna ${cidx}/${numCols - 1} en sección ${sidx}.`);
                        const colWidth = numCols > 0 ? 100 / numCols : 100;
                        sectionHtml += `<div class='col elementor-column' style='width:${colWidth}%; display:inline-block; vertical-align:top;' data-sidx='${sidx}' data-cidx='${cidx}'>`;
                        sectionHtml += `<button class='btn btn-danger btn-sm btn-remove-column' title='Eliminar columna' data-sidx='${sidx}' data-cidx='${cidx}'><i class='bi bi-x'></i></button>`;
                        sectionHtml += `<div class='widgets-list sortable-widgets' data-sidx='${sidx}' data-cidx='${cidx}'>`;
                        col.widgets.forEach((widget, widx) => {
                            sectionHtml += `<div class='elementor-widget' data-sidx='${sidx}' data-cidx='${cidx}' data-widx='${widx}'>`;
                            sectionHtml += `<button class='btn btn-remove-widget' title='Eliminar widget' data-sidx='${sidx}' data-cidx='${cidx}' data-widx='${widx}'><i class='bi bi-x'></i></button>`;
                            sectionHtml += `<div class='widget-preview'>${widget.type || 'Campo'}</div>`;
                            sectionHtml += `</div>`;
                        });
                        sectionHtml += `</div></div>`;
                    });
                    sectionHtml += `</div>`;
                    sectionHtml += `<div class='mt-2'><button class='btn btn-outline-primary btn-sm btn-add-column' data-sidx='${sidx}'><i class='bi bi-plus-square'></i> Agregar columna</button></div>`;
                    sectionHtml += `</div>`;
                    console.log(`RENDER: HTML para sección ${sidx} construido. Añadiendo al DOM...`);
                    $list.append(sectionHtml);
                    console.log(`RENDER: HTML para sección ${sidx} añadido.`);
                });
            }
            actualizarIndices();
            console.log('RENDER: actualizarIndices llamado.');
            setTimeout(() => {
                console.log('RENDER: Calling initDragAndDrop after delay...');
                initDragAndDrop();
            }, 50);
            console.log('RENDER: initDragAndDrop call scheduled.');
        }

        // === DELEGACIÓN DE EVENTOS ROBUSTA ===
        // Abrir modal de widgets
        $(document).on('click', '#open-widget-modal', function() {
            renderWidgetModal();
            new bootstrap.Modal(document.getElementById('widgetModal')).show();
        });
        // Agregar columna
        $('#sections-list').off('click', '.btn-add-column').on('click', '.btn-add-column', function(e) { 
            e.stopPropagation(); 
            const sidx = $(this).data('sidx');
            console.log('BTN ADD COLUMN: Clicked for section index', sidx); 
            if (!window.sections || !window.sections[sidx]) { 
                console.error('BTN ADD COLUMN: Section array or section not found at index', sidx, window.sections); 
                Swal.fire('Error', 'No se encontró la sección para agregar la columna.', 'error');
                return;
            }
            // Ensure the columns array exists
            if (!Array.isArray(window.sections[sidx].columns)) {
                 console.warn('BTN ADD COLUMN: Columns array missing for section', sidx, ', initializing.');
                 window.sections[sidx].columns = [];
            }
            window.sections[sidx].columns.push({ widgets: [] });
            console.log('BTN ADD COLUMN: Column pushed to model for section', sidx); 
            renderSections();
            console.log('BTN ADD COLUMN: renderSections called'); 
        });
        // Agregar sección
        $(document).on('click', '#add-section', function() {
            Swal.fire({
                title: '¿Cuántas columnas quieres en esta fila?',
                input: 'range',
                inputAttributes: { min: 1, max: 6, step: 1 },
                inputValue: 1,
                showCancelButton: true,
                confirmButtonText: 'Agregar',
                cancelButtonText: 'Cancelar',
                preConfirm: (value) => parseInt(value)
            }).then((result) => {
                if (result.isConfirmed && result.value) {
                    createSection(parseInt(result.value));
                }
            });
        });
        // === FIN DELEGACIÓN ===

        // 5. Botón agregar widget (reseteado)
        $(document).off('click', '.btn-modal-widget').on('click', '.btn-modal-widget', function() {
            let $col = $('.elementor-column.selected');
            if ($col.length === 0) $col = $('.elementor-column').first();
            if ($col.length === 0) {
                Swal.fire('Primero debes agregar una sección y al menos una columna.');
                return;
            }
            const type = $(this).data('widget');
            const sidx = $col.data('sidx');
            const cidx = $col.data('cidx');
            if(!window.sections[sidx] || !window.sections[sidx].columns[cidx]) {
                Swal.fire('Error interno: columna no encontrada. Refresca la página.');
                return;
            }
            createWidget(type, sidx, cidx);
            bootstrap.Modal.getInstance(document.getElementById('widgetModal')).hide();
        });

        // 6. Selección de widget y panel lateral SIEMPRE visible si hay widget
        $('#sections-list').off('click', '.elementor-widget').on('click', '.elementor-widget', function(e) {
            console.log('*** WIDGET CLICK HANDLER (#sections-list) FIRED! Target:', e.target, ' CurrentTarget:', e.currentTarget); 
            e.stopPropagation();
            $('.elementor-widget').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            const sidx = parseInt($(this).attr('data-sidx'));
            const cidx = parseInt($(this).attr('data-cidx'));
            const widx = parseInt($(this).attr('data-widx'));
            ensureValidModel();
            let widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];
            if(!widget) {
                $('#properties-content').html('<div class="alert alert-danger">No se pudo cargar el widget seleccionado. Por favor, recarga la página.</div>');
                return;
            }
            let html = `<form id='widget-properties-form' autocomplete='off'>`;
            html += `<div class='mb-2'><label class='form-label'>name</label><input type='text' class='form-control' name='name' value='${widget.name || ''}' required></div>`;
            html += `<div class='mb-2'><label class='form-label'>id</label><input type='text' class='form-control' name='id' value='${widget.id || ''}'></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='hidden' id='prop-hidden' ${widget.hidden ? 'checked' : ''}><label class='form-check-label' for='prop-hidden'>Ocultar campo</label></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='disabled' id='prop-disabled' ${widget.disabled ? 'checked' : ''}><label class='form-check-label' for='prop-disabled'>Deshabilitar campo</label></div>`;
            if(widget.type === 'select' || widget.type === 'radio') {
                html += `<div class='mb-2'><label class='form-label'>Opciones (una por línea)</label><textarea class='form-control' name='options' rows='3'>${(widget.options||[]).join('\n')}</textarea></div>`;
            }
            if(widget.type === 'button') {
                html += `<div class='mb-2'><label class='form-label'>Texto del botón</label><input type='text' class='form-control' name='label' value='${widget.label||'Botón'}'></div>`;
            } else {
                html += `<div class='mb-2'><label class='form-label'>Etiqueta (label)</label><input type='text' class='form-control' name='label' value='${widget.label||''}'></div>`;
            }
            html += `<button type='submit' class='btn btn-primary btn-sm mt-2'>Guardar</button>`;
            html += `</form>`;
            $('#properties-content').html(html);
            $('#widget-properties-form').off('submit').on('submit', function(ev) {
                ev.preventDefault();
                const data = $(this).serializeArray();
                data.forEach(d => { widget[d.name] = d.value; });
                widget.hidden = $(this).find('[name="hidden"]').is(':checked');
                widget.disabled = $(this).find('[name="disabled"]').is(':checked');
                if(widget.type === 'select' || widget.type === 'radio') {
                    widget.options = $(this).find('[name="options"]').val().split(/\r?\n/).filter(x=>x.trim()!=='');
                }
                renderSections();
                setTimeout(()=>{
                    $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${widx}']`).addClass('selected');
                    $('#properties-panel').addClass('active').show();
                }, 100);
            });
        });
        // === FIN SOLUCIÓN RADICAL ===
        
        $(document).on('click', function(e) {
            console.log('DOCUMENT CLICK: Target ->', e.target); 
            const $target = $(e.target);
            // Log closest elements for debugging
            console.log('DOCUMENT CLICK: Closest widget ->', $target.closest('.elementor-widget').length);
            console.log('DOCUMENT CLICK: Closest column ->', $target.closest('.elementor-column').length);
            console.log('DOCUMENT CLICK: Closest section ->', $target.closest('.elementor-section').length);
            console.log('DOCUMENT CLICK: Closest panel ->', $target.closest('#properties-panel').length);
            console.log('DOCUMENT CLICK: Closest modal ->', $target.closest('#widgetModal').length);

            if (!$target.closest('.elementor-section, .elementor-column, .elementor-widget, #properties-panel, #widgetModal').length) {
                console.log('PANEL: Clic detectado fuera.'); 
                $('.selected').removeClass('selected');
                $('#properties-panel').removeClass('active').hide(); 
                 console.log('PANEL: Panel ocultado por clic fuera.');
            } else {
                 console.log('PANEL: Clic detectado DENTRO de un elemento del builder.');
            }
        });

        // === DELEGACIÓN ROBUSTA Y PANEL FUNCIONAL ===
        // Eliminar widget
        $('#sections-list').on('click', '.btn-remove-widget', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            const widx = $(this).data('widx');
            if (window.sections[sidx] && window.sections[sidx].columns[cidx]) {
                window.sections[sidx].columns[cidx].widgets.splice(widx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar columna
        $('#sections-list').on('click', '.btn-remove-column', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            if (window.sections[sidx]) {
                window.sections[sidx].columns.splice(cidx, 1);
                if (window.sections[sidx].columns.length === 0) window.sections.splice(sidx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar sección
        $('#sections-list').on('click', '.btn-remove-section', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            window.sections.splice(sidx, 1);
            renderSections();
            $('#properties-panel').removeClass('active').hide();
        });
        // Selección de widget (panel lateral SIEMPRE)
        $('#sections-list').on('click', '.elementor-widget', function(e) {
            e.stopPropagation();
            $('.elementor-widget').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            const sidx = parseInt($(this).attr('data-sidx'));
            const cidx = parseInt($(this).attr('data-cidx'));
            const widx = parseInt($(this).attr('data-widx'));
            let widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];
            if(!widget) {
                $('#properties-content').html('<div class="alert alert-danger">No se pudo cargar el widget seleccionado.</div>');
                return;
            }
            let html = `<form id='widget-properties-form' autocomplete='off'>`;
            html += `<div class='mb-2'><label class='form-label'>name</label><input type='text' class='form-control' name='name' value='${widget.name || ''}' required></div>`;
            html += `<div class='mb-2'><label class='form-label'>id</label><input type='text' class='form-control' name='id' value='${widget.id || ''}'></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='hidden' id='prop-hidden' ${widget.hidden ? 'checked' : ''}><label class='form-check-label' for='prop-hidden'>Ocultar campo</label></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='disabled' id='prop-disabled' ${widget.disabled ? 'checked' : ''}><label class='form-check-label' for='prop-disabled'>Deshabilitar campo</label></div>`;
            if(widget.type === 'select' || widget.type === 'radio') {
                html += `<div class='mb-2'><label class='form-label'>Opciones (una por línea)</label><textarea class='form-control' name='options' rows='3'>${(widget.options||[]).join('\n')}</textarea></div>`;
            }
            if(widget.type === 'button') {
                html += `<div class='mb-2'><label class='form-label'>Texto del botón</label><input type='text' class='form-control' name='label' value='${widget.label||'Botón'}'></div>`;
            } else {
                html += `<div class='mb-2'><label class='form-label'>Etiqueta (label)</label><input type='text' class='form-control' name='label' value='${widget.label||''}'></div>`;
            }
            html += `<button type='submit' class='btn btn-primary btn-sm mt-2'>Guardar</button>`;
            html += `</form>`;
            $('#properties-content').html(html);
            $('#widget-properties-form').off('submit').on('submit', function(ev) {
                ev.preventDefault();
                const data = $(this).serializeArray();
                data.forEach(d => { widget[d.name] = d.value; });
                widget.hidden = $(this).find('[name="hidden"]').is(':checked');
                widget.disabled = $(this).find('[name="disabled"]').is(':checked');
                if(widget.type === 'select' || widget.type === 'radio') {
                    widget.options = $(this).find('[name="options"]').val().split(/\r?\n/).filter(x=>x.trim()!=='');
                }
                renderSections();
                setTimeout(()=>{
                    $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${widx}']`).addClass('selected');
                    $('#properties-panel').addClass('active').show();
                }, 100);
            });
        });
        // === FIN SOLUCIÓN RADICAL ===
        
        $(document).on('click', function(e) {
            console.log('DOCUMENT CLICK: Target ->', e.target); 
            const $target = $(e.target);
            // Log closest elements for debugging
            console.log('DOCUMENT CLICK: Closest widget ->', $target.closest('.elementor-widget').length);
            console.log('DOCUMENT CLICK: Closest column ->', $target.closest('.elementor-column').length);
            console.log('DOCUMENT CLICK: Closest section ->', $target.closest('.elementor-section').length);
            console.log('DOCUMENT CLICK: Closest panel ->', $target.closest('#properties-panel').length);
            console.log('DOCUMENT CLICK: Closest modal ->', $target.closest('#widgetModal').length);

            if (!$target.closest('.elementor-section, .elementor-column, .elementor-widget, #properties-panel, #widgetModal').length) {
                console.log('PANEL: Clic detectado fuera.'); 
                $('.selected').removeClass('selected');
                $('#properties-panel').removeClass('active').hide(); 
                 console.log('PANEL: Panel ocultado por clic fuera.');
            } else {
                 console.log('PANEL: Clic detectado DENTRO de un elemento del builder.');
            }
        });

        // === DELEGACIÓN ROBUSTA Y PANEL FUNCIONAL ===
        // Eliminar widget
        $('#sections-list').on('click', '.btn-remove-widget', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            const widx = $(this).data('widx');
            if (window.sections[sidx] && window.sections[sidx].columns[cidx]) {
                window.sections[sidx].columns[cidx].widgets.splice(widx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar columna
        $('#sections-list').on('click', '.btn-remove-column', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            if (window.sections[sidx]) {
                window.sections[sidx].columns.splice(cidx, 1);
                if (window.sections[sidx].columns.length === 0) window.sections.splice(sidx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar sección
        $('#sections-list').on('click', '.btn-remove-section', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            window.sections.splice(sidx, 1);
            renderSections();
            $('#properties-panel').removeClass('active').hide();
        });
        // Selección de widget (panel lateral SIEMPRE)
        $('#sections-list').on('click', '.elementor-widget', function(e) {
            e.stopPropagation();
            $('.elementor-widget').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            const sidx = parseInt($(this).attr('data-sidx'));
            const cidx = parseInt($(this).attr('data-cidx'));
            const widx = parseInt($(this).attr('data-widx'));
            let widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];
            if(!widget) {
                $('#properties-content').html('<div class="alert alert-danger">No se pudo cargar el widget seleccionado.</div>');
                return;
            }
            let html = `<form id='widget-properties-form' autocomplete='off'>`;
            html += `<div class='mb-2'><label class='form-label'>name</label><input type='text' class='form-control' name='name' value='${widget.name || ''}' required></div>`;
            html += `<div class='mb-2'><label class='form-label'>id</label><input type='text' class='form-control' name='id' value='${widget.id || ''}'></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='hidden' id='prop-hidden' ${widget.hidden ? 'checked' : ''}><label class='form-check-label' for='prop-hidden'>Ocultar campo</label></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='disabled' id='prop-disabled' ${widget.disabled ? 'checked' : ''}><label class='form-check-label' for='prop-disabled'>Deshabilitar campo</label></div>`;
            if(widget.type === 'select' || widget.type === 'radio') {
                html += `<div class='mb-2'><label class='form-label'>Opciones (una por línea)</label><textarea class='form-control' name='options' rows='3'>${(widget.options||[]).join('\n')}</textarea></div>`;
            }
            if(widget.type === 'button') {
                html += `<div class='mb-2'><label class='form-label'>Texto del botón</label><input type='text' class='form-control' name='label' value='${widget.label||'Botón'}'></div>`;
            } else {
                html += `<div class='mb-2'><label class='form-label'>Etiqueta (label)</label><input type='text' class='form-control' name='label' value='${widget.label||''}'></div>`;
            }
            html += `<button type='submit' class='btn btn-primary btn-sm mt-2'>Guardar</button>`;
            html += `</form>`;
            $('#properties-content').html(html);
            $('#widget-properties-form').off('submit').on('submit', function(ev) {
                ev.preventDefault();
                const data = $(this).serializeArray();
                data.forEach(d => { widget[d.name] = d.value; });
                widget.hidden = $(this).find('[name="hidden"]').is(':checked');
                widget.disabled = $(this).find('[name="disabled"]').is(':checked');
                if(widget.type === 'select' || widget.type === 'radio') {
                    widget.options = $(this).find('[name="options"]').val().split(/\r?\n/).filter(x=>x.trim()!=='');
                }
                renderSections();
                setTimeout(()=>{
                    $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${widx}']`).addClass('selected');
                    $('#properties-panel').addClass('active').show();
                }, 100);
            });
        });
        // === FIN SOLUCIÓN RADICAL ===
        
        $(document).on('click', function(e) {
            console.log('DOCUMENT CLICK: Target ->', e.target); 
            const $target = $(e.target);
            // Log closest elements for debugging
            console.log('DOCUMENT CLICK: Closest widget ->', $target.closest('.elementor-widget').length);
            console.log('DOCUMENT CLICK: Closest column ->', $target.closest('.elementor-column').length);
            console.log('DOCUMENT CLICK: Closest section ->', $target.closest('.elementor-section').length);
            console.log('DOCUMENT CLICK: Closest panel ->', $target.closest('#properties-panel').length);
            console.log('DOCUMENT CLICK: Closest modal ->', $target.closest('#widgetModal').length);

            if (!$target.closest('.elementor-section, .elementor-column, .elementor-widget, #properties-panel, #widgetModal').length) {
                console.log('PANEL: Clic detectado fuera.'); 
                $('.selected').removeClass('selected');
                $('#properties-panel').removeClass('active').hide(); 
                 console.log('PANEL: Panel ocultado por clic fuera.');
            } else {
                 console.log('PANEL: Clic detectado DENTRO de un elemento del builder.');
            }
        });

        // === DELEGACIÓN ROBUSTA Y PANEL FUNCIONAL ===
        // Eliminar widget
        $('#sections-list').on('click', '.btn-remove-widget', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            const widx = $(this).data('widx');
            if (window.sections[sidx] && window.sections[sidx].columns[cidx]) {
                window.sections[sidx].columns[cidx].widgets.splice(widx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar columna
        $('#sections-list').on('click', '.btn-remove-column', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            if (window.sections[sidx]) {
                window.sections[sidx].columns.splice(cidx, 1);
                if (window.sections[sidx].columns.length === 0) window.sections.splice(sidx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar sección
        $('#sections-list').on('click', '.btn-remove-section', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            window.sections.splice(sidx, 1);
            renderSections();
            $('#properties-panel').removeClass('active').hide();
        });
        // Selección de widget (panel lateral SIEMPRE)
        $('#sections-list').on('click', '.elementor-widget', function(e) {
            e.stopPropagation();
            $('.elementor-widget').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            const sidx = parseInt($(this).attr('data-sidx'));
            const cidx = parseInt($(this).attr('data-cidx'));
            const widx = parseInt($(this).attr('data-widx'));
            let widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];
            if(!widget) {
                $('#properties-content').html('<div class="alert alert-danger">No se pudo cargar el widget seleccionado.</div>');
                return;
            }
            let html = `<form id='widget-properties-form' autocomplete='off'>`;
            html += `<div class='mb-2'><label class='form-label'>name</label><input type='text' class='form-control' name='name' value='${widget.name || ''}' required></div>`;
            html += `<div class='mb-2'><label class='form-label'>id</label><input type='text' class='form-control' name='id' value='${widget.id || ''}'></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='hidden' id='prop-hidden' ${widget.hidden ? 'checked' : ''}><label class='form-check-label' for='prop-hidden'>Ocultar campo</label></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='disabled' id='prop-disabled' ${widget.disabled ? 'checked' : ''}><label class='form-check-label' for='prop-disabled'>Deshabilitar campo</label></div>`;
            if(widget.type === 'select' || widget.type === 'radio') {
                html += `<div class='mb-2'><label class='form-label'>Opciones (una por línea)</label><textarea class='form-control' name='options' rows='3'>${(widget.options||[]).join('\n')}</textarea></div>`;
            }
            if(widget.type === 'button') {
                html += `<div class='mb-2'><label class='form-label'>Texto del botón</label><input type='text' class='form-control' name='label' value='${widget.label||'Botón'}'></div>`;
            } else {
                html += `<div class='mb-2'><label class='form-label'>Etiqueta (label)</label><input type='text' class='form-control' name='label' value='${widget.label||''}'></div>`;
            }
            html += `<button type='submit' class='btn btn-primary btn-sm mt-2'>Guardar</button>`;
            html += `</form>`;
            $('#properties-content').html(html);
            $('#widget-properties-form').off('submit').on('submit', function(ev) {
                ev.preventDefault();
                const data = $(this).serializeArray();
                data.forEach(d => { widget[d.name] = d.value; });
                widget.hidden = $(this).find('[name="hidden"]').is(':checked');
                widget.disabled = $(this).find('[name="disabled"]').is(':checked');
                if(widget.type === 'select' || widget.type === 'radio') {
                    widget.options = $(this).find('[name="options"]').val().split(/\r?\n/).filter(x=>x.trim()!=='');
                }
                renderSections();
                setTimeout(()=>{
                    $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${widx}']`).addClass('selected');
                    $('#properties-panel').addClass('active').show();
                }, 100);
            });
        });
        // === FIN SOLUCIÓN RADICAL ===
        
        $(document).on('click', function(e) {
            console.log('DOCUMENT CLICK: Target ->', e.target); 
            const $target = $(e.target);
            // Log closest elements for debugging
            console.log('DOCUMENT CLICK: Closest widget ->', $target.closest('.elementor-widget').length);
            console.log('DOCUMENT CLICK: Closest column ->', $target.closest('.elementor-column').length);
            console.log('DOCUMENT CLICK: Closest section ->', $target.closest('.elementor-section').length);
            console.log('DOCUMENT CLICK: Closest panel ->', $target.closest('#properties-panel').length);
            console.log('DOCUMENT CLICK: Closest modal ->', $target.closest('#widgetModal').length);

            if (!$target.closest('.elementor-section, .elementor-column, .elementor-widget, #properties-panel, #widgetModal').length) {
                console.log('PANEL: Clic detectado fuera.'); 
                $('.selected').removeClass('selected');
                $('#properties-panel').removeClass('active').hide(); 
                 console.log('PANEL: Panel ocultado por clic fuera.');
            } else {
                 console.log('PANEL: Clic detectado DENTRO de un elemento del builder.');
            }
        });

        // === DELEGACIÓN ROBUSTA Y PANEL FUNCIONAL ===
        // Eliminar widget
        $('#sections-list').on('click', '.btn-remove-widget', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            const widx = $(this).data('widx');
            if (window.sections[sidx] && window.sections[sidx].columns[cidx]) {
                window.sections[sidx].columns[cidx].widgets.splice(widx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar columna
        $('#sections-list').on('click', '.btn-remove-column', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            const cidx = $(this).data('cidx');
            if (window.sections[sidx]) {
                window.sections[sidx].columns.splice(cidx, 1);
                if (window.sections[sidx].columns.length === 0) window.sections.splice(sidx, 1);
                renderSections();
                $('#properties-panel').removeClass('active').hide();
            }
        });
        // Eliminar sección
        $('#sections-list').on('click', '.btn-remove-section', function(e) {
            e.stopPropagation();
            const sidx = $(this).data('sidx');
            window.sections.splice(sidx, 1);
            renderSections();
            $('#properties-panel').removeClass('active').hide();
        });
        // Selección de widget (panel lateral SIEMPRE)
        $('#sections-list').on('click', '.elementor-widget', function(e) {
            e.stopPropagation();
            $('.elementor-widget').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            const sidx = parseInt($(this).attr('data-sidx'));
            const cidx = parseInt($(this).attr('data-cidx'));
            const widx = parseInt($(this).attr('data-widx'));
            let widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];
            if(!widget) {
                $('#properties-content').html('<div class="alert alert-danger">No se pudo cargar el widget seleccionado.</div>');
                return;
            }
            let html = `<form id='widget-properties-form' autocomplete='off'>`;
            html += `<div class='mb-2'><label class='form-label'>name</label><input type='text' class='form-control' name='name' value='${widget.name || ''}' required></div>`;
            html += `<div class='mb-2'><label class='form-label'>id</label><input type='text' class='form-control' name='id' value='${widget.id || ''}'></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='hidden' id='prop-hidden' ${widget.hidden ? 'checked' : ''}><label class='form-check-label' for='prop-hidden'>Ocultar campo</label></div>`;
            html += `<div class='form-check mb-2'><input class='form-check-input' type='checkbox' name='disabled' id='prop-disabled' ${widget.disabled ? 'checked' : ''}><label class='form-check-label' for='prop-disabled'>Deshabilitar campo</label></div>`;
            if(widget.type === 'select' || widget.type === 'radio') {
                html += `<div class='mb-2'><label class='form-label'>Opciones (una por línea)</label><textarea class='form-control' name='options' rows='3'>${(widget.options||[]).join('\n')}</textarea></div>`;
            }
            if(widget.type === 'button') {
                html += `<div class='mb-2'><label class='form-label'>Texto del botón</label><input type='text' class='form-control' name='label' value='${widget.label||'Botón'}'></div>`;
            } else {
                html += `<div class='mb-2'><label class='form-label'>Etiqueta (label)</label><input type='text' class='form-control' name='label' value='${widget.label||''}'></div>`;
            }
            html += `<button type='submit' class='btn btn-primary btn-sm mt-2'>Guardar</button>`;
            html += `</form>`;
            $('#properties-content').html(html);
            $('#widget-properties-form').off('submit').on('submit', function(ev) {
                ev.preventDefault();
                const data = $(this).serializeArray();
                data.forEach(d => { widget[d.name] = d.value; });
                widget.hidden = $(this).find('[name="hidden"]').is(':checked');
                widget.disabled = $(this).find('[name="disabled"]').is(':checked');
                if(widget.type === 'select' || widget.type === 'radio') {
                    widget.options = $(this).find('[name="options"]').val().split(/\r?\n/).filter(x=>x.trim()!=='');
                }
                renderSections();
                setTimeout(()=>{
                    $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${widx}']`).addClass('selected');
                    $('#properties-panel').addClass('active').show();
                }, 100);
            });
        });
        // Selección de columna
        $('#sections-list').on('click', '.elementor-column', function(e) {
            e.stopPropagation();
            $('.elementor-column').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            $('#properties-content').html('<div class="text-muted">Propiedades de la columna (próximamente editable)</div>');
        });
        // Selección de sección
        $('#sections-list').on('click', '.elementor-section', function(e) {
            e.stopPropagation();
            $('.elementor-section').removeClass('selected');
            $(this).addClass('selected');
            $('#properties-panel').addClass('active').show();
            $('#properties-content').html('<div class="text-muted">Propiedades de la sección (próximamente editable)</div>');
        });
        // === FIN DELEGACIÓN Y PANEL FUNCIONAL ===
        
        $(document).on('click', function(e) {
            if (!$(e.target).closest('.elementor-section, .elementor-column, .elementor-widget, #properties-panel, #widgetModal').length) {
                $('.selected').removeClass('selected');
                $('#properties-panel').removeClass('active');
            }
        });
    });
    
    function renderWidgetModal() {
        const $list = $('#widget-modal-list');
        $list.empty();
        Object.keys(window.widgetTypes).forEach(type => {
            $list.append(`<div class="col-6 mb-3"><button class="btn btn-outline-primary w-100 btn-modal-widget" data-widget="${type}"><i class="bi ${window.widgetIcons[type] || 'bi-box'}"></i> ${window.widgetTypes[type]}</button></div>`);
        });
    }

    function initDragAndDrop() {
        console.log('Inicializando drag & drop...');
        
        // Destruir sortables previos
        try {
            $('.sortable-widgets').sortable('destroy');
        } catch(e) {}
        
        // Inicializar sortable en todas las columnas
        $('.sortable-widgets').sortable({
            connectWith: '.sortable-widgets',
            placeholder: 'sortable-placeholder',
            items: '> .elementor-widget',
            cursor: 'move',
            opacity: 0.7,
            revert: true,
            tolerance: 'pointer',
            zIndex: 9999,
            scroll: true,
            delay: 150,
            distance: 5,
            handle: '.widget-preview', 
            forceHelperSize: true, 
            forcePlaceholderSize: true,
            helper: function(event, ui) {
                var $clone = $(ui).clone();
                $clone.css('position', 'absolute');
                return $clone;
            },
            start: function(e, ui) {
                ui.placeholder.height(ui.item.height());
                ui.helper.css('z-index', 9999);
                $(this).sortable('refresh');
                $('.sortable-widgets').sortable('refreshPositions');
            },
            over: function(e, ui) {
                $(this).addClass('highlight-drop');
            },
            out: function(e, ui) {
                $(this).removeClass('highlight-drop');
            },
            beforeStop: function(e, ui) {
                // Evitar que se reinicialice durante el drag
                e.stopPropagation();
            },
            receive: function(event, ui) {
                console.log('Widget recibido en nueva columna');
                $(this).removeClass('highlight-drop');
            },
            update: function(event, ui) {
                console.log('Widget actualizado');
                if(ui.sender) {
                    console.log('Widget movido de otra columna');
                } else {
                    console.log('Widget reordenado en la misma columna');
                }
            },
            stop: function(e, ui) {
                $(this).removeClass('highlight-drop');
                // Dar tiempo para que termine la animación
                setTimeout(function() {
                    // Actualizar el modelo de datos
                    sincronizarModeloDeDatos();
                }, 100);
            }
        }).disableSelection();
        console.log('SCRIPT: Drag & drop inicializado.');
    }

    function sincronizarModeloDeDatos() {
        sanitizeSections();
        console.log('Sincronizando datos del modelo...');
        
        // Crear nueva estructura de datos basada en el DOM actual
        let newSections = [];
        
        $('.elementor-section').each(function(sidx) {
            let newSection = { columns: [] };
            
            $(this).find('.elementor-column').each(function(cidx) {
                let newColumn = { widgets: [] };
                
                $(this).find('.elementor-widget').each(function(widx) {
                    // Obtener datos del widget original
                    let originalSidx = $(this).attr('data-sidx');
                    let originalCidx = $(this).attr('data-cidx');
                    let originalWidx = $(this).attr('data-widx');
                    
                    try {
                        // Si existe en el modelo original, copiarlo
                        if (window.sections[originalSidx] && 
                            window.sections[originalSidx].columns[originalCidx] && 
                            window.sections[originalSidx].columns[originalCidx].widgets[originalWidx]) {
                            let widget = window.sections[originalSidx].columns[originalCidx].widgets[originalWidx];
                            newColumn.widgets.push({...widget});
                        } else if (lastDraggedWidget) {
                            newColumn.widgets.push({ type: lastDraggedWidget.type });
                        } else {
                            // Intentar buscar por contenido si los índices no coinciden
                            let foundWidget = false;
                            for (let s = 0; s < window.sections.length; s++) {
                                for (let c = 0; c < window.sections[s].columns.length; c++) {
                                    for (let w = 0; w < window.sections[s].columns[c].widgets.length; w++) {
                                        let currentWidget = window.sections[s].columns[c].widgets[w];
                                        let currentHTML = $(this).html();
                                        if (currentHTML.indexOf(currentWidget.type) > -1) {
                                            newColumn.widgets.push({...currentWidget});
                                            foundWidget = true;
                                            break;
                                        }
                                    }
                                    if (foundWidget) break;
                                }
                                if (foundWidget) break;
                            }
                            
                            // Si no encontramos el widget, determinar tipo por el contenido HTML
                            if (!foundWidget) {
                                let type = 'text';
                                if ($(this).find('.bi-card-text').length > 0) type = 'textarea';
                                if ($(this).find('.bi-list').length > 0) type = 'select';
                                if ($(this).find('.bi-check2-square').length > 0) type = 'checkbox';
                                if ($(this).find('.bi-toggle-on').length > 0) type = 'switch';
                                if ($(this).find('.bi-box-arrow-in-right').length > 0) type = 'button';
                                if ($(this).find('.bi-calendar').length > 0) type = 'date';
                                if ($(this).find('.bi-paperclip').length > 0) type = 'file';
                                if ($(this).find('.bi-envelope').length > 0) type = 'email';
                                if ($(this).find('.bi-123').length > 0) type = 'number';
                                if ($(this).find('.bi-key').length > 0) type = 'password';
                                if ($(this).find('.bi-palette').length > 0) type = 'color';
                                if ($(this).find('.bi-sliders').length > 0) type = 'range';
                                if ($(this).find('.bi-record-circle').length > 0) type = 'radio';
                                if ($(this).find('.bi-type').length > 0) type = 'static';
                                if ($(this).find('.card-title').length > 0) type = 'card';
                                
                                newColumn.widgets.push({ type });
                            }
                        }
                    } catch (error) {
                        console.error("Error sincronizando widget:", error);
                        // En caso de error, agregar un widget de texto como fallback
                        newColumn.widgets.push({ type: 'text' });
                    }
                });
                
                newSection.columns.push(newColumn);
            });
            
            newSections.push(newSection);
        });
        
        // Reemplazar el modelo de datos actual
        window.sections = newSections;
        
        // Actualizar atributos de datos en el DOM
        actualizarIndices();

        // Console debug to help identify issues
        console.log('Modelo actualizado:', JSON.stringify(window.sections));
        
        // Resetear el último widget arrastrado
        lastDraggedWidget = null;
    }

    function actualizarIndices() {
        // Recorremos todas las columnas y widgets para actualizar sus índices en el DOM
        $('.elementor-section').each(function(sidx) {
            $(this).attr('data-sidx', sidx);
            $(this).find('.btn-remove-section').attr('data-sidx', sidx);
            $(this).find('.btn-add-column').attr('data-sidx', sidx);
            
            $(this).find('.elementor-column').each(function(cidx) {
                $(this).attr('data-sidx', sidx);
                $(this).attr('data-cidx', cidx);
                $(this).find('.btn-remove-column').attr('data-sidx', sidx);
                $(this).find('.btn-remove-column').attr('data-cidx', cidx);
                $(this).find('.sortable-widgets').attr('data-sidx', sidx);
                $(this).find('.sortable-widgets').attr('data-cidx', cidx);
                
                $(this).find('.elementor-widget').each(function(widx) {
                    $(this).attr('data-sidx', sidx);
                    $(this).attr('data-cidx', cidx);
                    $(this).attr('data-widx', widx);
                    $(this).find('.btn-remove-widget').attr('data-sidx', sidx);
                    $(this).find('.btn-remove-widget').attr('data-cidx', cidx);
                    $(this).find('.btn-remove-widget').attr('data-widx', widx);
                });
            });
        });
    }

    function sanitizeSections() {
        // Elimina secciones vacías, nulas o mal formadas
        window.sections = (window.sections||[]).filter(
            s => s && Array.isArray(s.columns) && s.columns.length > 0
        );
        // Elimina columnas vacías o nulas
        window.sections.forEach(section => {
            if (!Array.isArray(section.columns)) section.columns = [];
            section.columns = section.columns.filter(col => col && Array.isArray(col.widgets));
            section.columns.forEach(col => {
                if (!Array.isArray(col.widgets)) col.widgets = [];
            });
        });
    }

    // === PANEL DE PROPIEDADES: SOLUCIÓN DEFINITIVA ===

    // 0. Asegurar que el contenedor del panel exista (medida de seguridad)
    if ($('#properties-panel').length === 0) {
        $('body').append('<div id="properties-panel" style="position:fixed; top:60px; right:-350px; width:350px; bottom:0; background:#f9f9f9; border-left:1px solid #ddd; padding:20px; transition: right 0.3s ease-in-out; z-index:1040; display:block; overflow-y: auto; box-shadow: -3px 0 10px rgba(0,0,0,0.1);"><h5 class="border-bottom pb-2 mb-3">Propiedades</h5><div id="properties-content"><p class="text-muted">Selecciona un elemento para ver sus propiedades.</p></div></div>');
        console.warn("PANEL: Contenedor #properties-panel no encontrado, se creó uno por defecto.");
    }

    // 1. Delegación robusta para selección de WIDGET
    $('#sections-list').off('click', '.elementor-widget').on('click', '.elementor-widget', function(e) {
        console.log('*** WIDGET CLICK HANDLER (#sections-list) FIRED! Target:', e.target, ' CurrentTarget:', e.currentTarget); 
        e.stopPropagation(); // Evita que el clic llegue a elementos padres (columna, sección)
        console.log('PANEL: Clic detectado en Widget:', this);

        // Marcar como seleccionado
        $('.elementor-widget, .elementor-column, .elementor-section').removeClass('selected');
        $(this).addClass('selected');
        $('#properties-panel').show().css('right', '0px').addClass('active');
        console.log('PANEL: Panel forzado a ser visible.');

        // Obtener datos del widget del modelo
        const sidx = parseInt($(this).attr('data-sidx'));
        const cidx = parseInt($(this).attr('data-cidx'));
        const widx = parseInt($(this).attr('data-widx'));
        console.log(`PANEL: Buscando widget en índices [${sidx}][${cidx}][${widx}]`); 
        let widget;

        try {
            console.log('PANEL: Obteniendo datos del widget...');
            widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];
            console.log('PANEL: Datos del widget encontrados:', widget);

            if (!widget) { 
                console.error('PANEL ERROR: Widget NO encontrado en window.sections[', sidx, '][', cidx, '][', widx, ']'); 
                Swal.fire('Error', 'No se pudo encontrar el widget para guardar los cambios.', 'error');
                return; 
            }

            // --- Generación del HTML del formulario de propiedades ---
            console.log('PANEL: Generando HTML para el formulario...'); 
            let html = `<form id='widget-properties-form' data-sidx='${sidx}' data-cidx='${cidx}' data-widx='${widx}' autocomplete='off'>`;
            html += `<div class='mb-3'><span class='badge bg-secondary'>Tipo: ${widget.type}</span></div>`;

            // Propiedades comunes
            html += `<div class='mb-2'><label class='form-label fw-bold'>Nombre (name)</label><input type='text' class='form-control form-control-sm' name='name' value='${widget.name || ''}' required placeholder='ej: nombre_usuario'></div>`;
            html += `<div class='mb-2'><label class='form-label fw-bold'>ID</label><input type='text' class='form-control form-control-sm' name='id' value='${widget.id || ''}' placeholder='ej: user_name_id'></div>`;
            html += `<div class='mb-2'><label class='form-label fw-bold'>Etiqueta (label)</label><input type='text' class='form-control form-control-sm' name='label' value='${widget.label || ''}' placeholder='Texto visible para el usuario'></div>`;
            html += `<div class='mb-2'><label class='form-label fw-bold'>Placeholder</label><input type='text' class='form-control form-control-sm' name='placeholder' value='${widget.placeholder || ''}'></div>`;
            html += `<div class='mb-2'><label class='form-label fw-bold'>Requerido <input type='checkbox' name='required' ${widget.required ? 'checked' : ''}></label></div>`;
            html += `<div class='mb-2'><label class='form-label fw-bold'>Deshabilitado <input type='checkbox' name='disabled' ${widget.disabled ? 'checked' : ''}></label></div>`;
            if(widget.type === 'select' || widget.type === 'radio') {
                html += `<div class='mb-2'><label class='form-label fw-bold'>Opciones (una por línea)</label><textarea class='form-control' name='options' rows='3'>${(widget.options||[]).join('\n')}</textarea></div>`;
            }
            html += `<button type='submit' class='btn btn-success w-100 mt-2'>Guardar</button></form>`;
            $('#properties-content').html(html);
            console.log('PANEL: HTML generado para propiedades.');
            $('#properties-panel').show().css('right', '0px').addClass('active');
            console.log('PANEL: Contenido del panel actualizado.');

        } catch (error) {
            console.error('PANEL CRITICAL ERROR en el handler del clic:', error); 
            $('#properties-content').html('<div class="alert alert-danger">Error crítico al procesar el clic del widget. Revisa la consola.</div>');
        }
    });

    // 2. Delegación para GUARDAR propiedades desde el panel
    $(document).on('submit', '#widget-properties-form', function(e) {
        e.preventDefault();
        console.log('PANEL: Guardando propiedades...');
        const $form = $(this);
        const sidx = parseInt($form.data('sidx'));
        const cidx = parseInt($form.data('cidx'));
        const widx = parseInt($form.data('widx'));
        let widget = window.sections[sidx]?.columns[cidx]?.widgets[widx];

        if (!widget) {
            console.error('PANEL SAVE ERROR: No se encontró el widget para guardar.');
            Swal.fire('Error', 'No se pudo encontrar el widget para guardar los cambios.', 'error');
            return;
        }

        try {
            const formData = $form.serializeArray();
            const updatedData = {};

            // Campos de texto y selects
            formData.forEach(item => {
                updatedData[item.name] = item.value;
            });

            // Checkboxes/Switches
            updatedData.required = $form.find('[name="required"]').is(':checked');
            updatedData.disabled = $form.find('[name="disabled"]').is(':checked');

            // Actualizar el modelo
            Object.assign(widget, updatedData);
            console.log('PANEL: Modelo actualizado:', widget);

            renderSections(); // Re-renderizar todo para reflejar cambios

            // Mantener seleccionado y panel abierto (opcional, pero útil)
            setTimeout(() => {
                const $widgetElement = $(`.elementor-widget[data-sidx='${sidx}'][data-cidx='${cidx}'][data-widx='${widx}']`);
                if ($widgetElement.length) {
                    $widgetElement.addClass('selected'); // Asegurar que sigue seleccionado
                    // No necesitamos re-abrir el panel si no se cerró
                     Swal.fire({ icon: 'success', title: 'Guardado', showConfirmButton: false, timer: 1000 });
                } else {
                     $('#properties-panel').removeClass('active').css('right', '-350px');
                }
            }, 100);

        } catch (error) {
            console.error('PANEL SAVE CRITICAL ERROR:', error);
            Swal.fire('Error Grave', `Ocurrió un error al guardar: ${error.message}`, 'error');
        }
    });

    // 3. Delegación para selección de COLUMNA (muestra panel básico)
    $('#sections-list').off('click', '.elementor-column').on('click', '.elementor-column', function(e) {
        e.stopPropagation();
        console.log('PANEL: Clic detectado en Columna:', this);
        $('.elementor-widget, .elementor-column, .elementor-section').removeClass('selected');
        $(this).addClass('selected');
        $('#properties-panel').show().css('right', '0px').addClass('active');
        $('#properties-content').html('<p class="text-muted">Propiedades de la Columna seleccionada. (Edición futura)</p>');
    });

    // 4. Delegación para selección de SECCIÓN (muestra panel básico)
    $('#sections-list').off('click', '.elementor-section').on('click', '.elementor-section', function(e) {
        e.stopPropagation();
        console.log('PANEL: Clic detectado en Sección:', this);
        $('.elementor-widget, .elementor-column, .elementor-section').removeClass('selected');
        $(this).addClass('selected');
        $('#properties-panel').show().css('right', '0px').addClass('active');
        $('#properties-content').html('<p class="text-muted">Propiedades de la Sección seleccionada. (Edición futura)</p>');
    });

    // 5. Clic FUERA para deseleccionar y ocultar panel
    $(document).off('click.outsidePanel').on('click.outsidePanel', function(e) {
        // Si el clic NO fue dentro del panel, ni sobre un elemento seleccionable, ni en un modal
        if (!$(e.target).closest('#properties-panel, .elementor-widget, .elementor-column, .elementor-section, .btn-modal-widget, #widgetModal, .swal2-container').length) {
            console.log('PANEL: Clic detectado fuera.');
            $('.elementor-widget, .elementor-column, .elementor-section').removeClass('selected');
            $('#properties-panel').removeClass('active').css('right', '-350px');
        }
    });

    // Eliminar los handlers anteriores que puedan causar conflicto (limpieza final)
    // $(document).off('click', '.elementor-widget'); // Ya lo hicimos arriba con .off().on()
    // ... (Asegurarse que no haya otros handlers para .elementor-widget, .column, .section click)

    // === FIN SOLUCIÓN DEFINITIVA PANEL ===

    </script>
</body>
</html>
